{"version":3,"sources":["currencyData.js","App.js","serviceWorker.js","index.js"],"names":["currencyData","currencyPromise","state","Promise","resolve","reject","request","cb","a","res","console","error","App","useState","data","setData","useEffect","className","undefined","rates","map","element","key","id","value","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"8NAAMA,EAAe,CACnB,OAAQ,EACR,UAAY,WACZ,KAAO,MACP,MAAS,CACP,CACE,GAAM,EACN,KAAQ,MACR,MAAS,SAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAS,SAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAS,WAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAS,WAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAS,UAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAS,UAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAQ,SAEV,CACE,GAAM,EACN,KAAQ,MACR,MAAS,KAEX,CACE,GAAM,EACN,KAAQ,MACR,MAAQ,KAEV,CACE,GAAM,GACN,KAAQ,MACR,MAAS,OAEX,CACE,GAAM,GACN,KAAQ,MACR,MAAS,SAEX,CACE,GAAM,GACN,KAAQ,MACR,MAAS,YAKFC,EAAkB,WAAmB,IAAlBC,IAAiB,yDAC/C,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACvBH,EACFE,EAAQJ,GAERK,EAAO,aCrEPC,G,MAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEMP,IAFN,OAENQ,EAFM,OAGZF,EAAGE,GAHS,gDAKZC,QAAQC,MAAR,MALY,yDAAH,uDA+BEC,MAtBf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,KAOb,OAJAC,qBAAU,WACRV,EAAQS,KACP,IAGD,yBAAKE,UAAU,sBAEIC,IAAfJ,EAAKK,OAELL,EAAKK,MAAMC,KAAI,SAACC,GAAD,OACb,wBAAIJ,UAAU,gBAAgBK,IAAKD,EAAQE,IACzC,wBAAIN,UAAU,gBAAd,WAAsCI,EAAQG,MAA9C,IAAsDH,EAAQI,YCftDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLD,QAAQC,MAAMA,EAAMgC,a","file":"static/js/main.8203d265.chunk.js","sourcesContent":["const currencyData = {\n  \"valid\":true,\n  \"timestamp\":1582195447,\n  \"base\":\"USD\",\n  \"rates\": [\n    {\n      \"id\": 1,\n      \"name\": \"AED\",\n      \"value\": 3.67338,\n    },\n    {\n      \"id\": 2,\n      \"name\": \"AFN\",\n      \"value\": 77.8079,\n    },\n    {\n      \"id\": 3,\n      \"name\": \"ALL\",\n      \"value\": 113.23065,\n    },\n    {\n      \"id\": 4,\n      \"name\": \"AMD\",\n      \"value\": 478.14251,\n    },\n    {\n      \"id\": 5,\n      \"name\": \"AOA\",\n      \"value\": 493.9822,\n    },\n    {\n      \"id\": 6,\n      \"name\": \"ARS\",\n      \"value\": 61.66319,\n    },\n    {\n      \"id\": 7,\n      \"name\": \"AUD\",\n      \"value\":1.50684,\n    },\n    {\n      \"id\": 8,\n      \"name\": \"AWG\",\n      \"value\": 1.8,\n    },\n    {\n      \"id\": 9,\n      \"name\": \"AZN\",\n      \"value\":1.7,\n    },\n    {\n      \"id\": 10,\n      \"name\": \"BAM\",\n      \"value\": 1.811,\n    },\n    {\n      \"id\": 11,\n      \"name\": \"BBD\",\n      \"value\": 2.01732,\n    },\n    {\n      \"id\": 12,\n      \"name\": \"UAH\",\n      \"value\": 24.50375,\n    },\n  ]\n};\n\nexport const currencyPromise = (state = true) => {\n  return new Promise((resolve, reject) => {\n    if (state) {\n      resolve(currencyData);\n    } else {\n      reject('Error');\n    }\n  });\n}","import React, { useState, useEffect } from 'react';\nimport { currencyPromise } from './currencyData';\nimport './App.css';\n\nconst request = async (cb) => {\n  try {\n    const res = await currencyPromise();\n    cb(res);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    request(setData);\n  }, []);\n\n  return (\n    <div className='app_container'>\n      {\n        data.rates !== undefined \n        && \n        data.rates.map((element) => (\n          <ul className='currency_list' key={element.id}>\n            <li className='list_element'>1 USD - {element.value} {element.name}</li>\n          </ul>\n        ))\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}